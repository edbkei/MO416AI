

1. Modeling Proposal.

function BREADTH_FIRST_SEARCH(problem) returns a list of actions towards the pacman goal {
# The aim is to return a list of actions pacman to reach the goal (a food) by
# searching the shallowest nodes or states in the search tree first.
#
input: problem (a tuple of start_state, action, cost, goalState)
# node or state has the same meaning for pacman game
local variables: current_state (a node) and next_state (a neighbor node)

queue := util.Queue();
trace := empty list;
seenList := empty list;

start_state := CREATE-NODE(START-STATE[problem]);
initial push on queue with start_state;
Append (start_state) into seenList;

while queue is not empty do

   current_state := pop from queue;
   
   if goal state from problem is reached at current_state then  
      break;
   end if;
   
   successors := getSucccessors(current_state) from problem;
   
   for successor in successors do
       next_state := state of successor;
	   next_action := action of successor;
	   
	   if next_state not in seenList then
	      Append(next_state) into seenList;
		  push(next_state) into queue;
		  trace[next_state] := with tuple (current_state, next_action);
	   end if;

   end for;
   
end while

actions list := empty list;
backtrack_state := current_state;

while backtrack_state is not start_state do
     prev_state, action := trace[backtrack_state];
	 append (action) into actions list;
	 backtrack_state := prev_state;
end while

actions list := reverse the actions list;
}
-----------------------------------------------------------------------------------

function DEPTH_FIRST_SEARCH(problem) returns a list of actions towards the pacman goal {
# The aim is to return a list of actions pacman to reach the goal (a food) by
# searching the deepest nodes in the search tree first.
#
input: problem (a tuple of start_state, action, cost, goalState)
# node or state has the same meaning for pacman game
local variables: current_state (a node) and next_state (a neighbor node)

stack := get util.Stack();
trace := get util.Stack();

traveledList is empty initially;
step_counter := 0

start_state := CREATE-NODE(START-STATE[problem]);
initial push stack with tuple (start_state, step_counter, 'START')

while stack is not empty do
   current_state, _, action := pop from stack;
   Append (current_state) into traveledList;
   
   if action is not 'START' then
      push (action) into trace list;
	  step_counter := step_counter + 1;
   end if;
   
   if goal state from problem is reached at current_state then  
      return trace list;
   end if;
   
   valid_successors := 0;
   successors := getSucccessors(current_state) from problem;
   
   for successor in successors do
       next_state := state of successor;
	   next_action := action of successor;
	   
	   if next_state not in traveledList then
	      valid_successors := valid_successors + 1;
		  push the tuple (next_state, step_counter, next_action) into stack;
	   end if;
   end for;
   
   if valid_successors is zero then
      while step_counter is not stackList[-1][1] # back until next awaiting state do
	      setp_counter := step_counter - 1;
		  pop from trace list;
	  end while;
   end if;

end while
}
-----------------------------------------------------------------------------------

function A_STAR_SEARCH(problem) returns a list of actions towards the pacman goal {
# the pacman goal is to get the food at n-interactions with cost f(n) = h(n)
#
input: problem (a tuple of start_state, action, cost, goalState)
# node or state has the same meaning for pacman game
local variables: current_state (a node) and next_state (a neighbor node)

openList := class PriorityQueue();
g := empty list; # step cost
start_state := CREATE-NODE(START-STATE[problem]);
Define function f(current_state) returns g[current_state] + manhattanHeuristic(current_state, problem);
g[start_state] := 0; # cost 0 initially
Push(start_state, 0) into openList;
start openSeen list;
close_list := empty list;
trace := empty list;
trace[start_state] := a tuple with [None, None, 0]

while openList is not empty do
    current_state := get popping open_list;
	remove (current_state) from openSeen list;
	if goal in problem is reached at current_state then break;
	
	successors := getSuccessors from current_state in problem;
	
	for successor in successors do
	    next_state := state from successor;
		next_action = action from successor;
		next_cost := cost from successor;
		successor_cost := g[current_state] + next_cost;
		
	    UPDATE status := False;
		if next_state in openSeen list do
		   if g[next_state] =< successor_cost then pass;
		   else do
		           g[next_state] =< successor_cost;
				   Update openList with item=next_state and priority=f(next_state);
		        end do 
		   else if next_state in close_list do
		        if g[next_state] =< successor_cost then pass;
				else UPDATE status := True;
				end if
		   else: UDPATE status := True
		   end if;
		end if;
		
		if UPDATE status is True then
		   g[next_state] := succcessor_cost;
		   openList update with item=next_state and priority=f(next_state)
		   Append (next) into openSeen;
		   
		   if next_state in close_list then
		      remove(next_state) from close_list;
			  remove(next_state) from openSeen
		   end if;
		end if;
		
		# update and allow tracing to the best state
		if next_state in trace then
		   if cost in trace[next_state] > successor_cost then
		      trace[next_state] state := current_state;
			  trace[next_state] := next_action;
			  trace[next_state] cost := successor_cost;
		   end if;
		end if;
		
		
	end for;
	
	Append(current_state) into close_list;

end while

actions list := empty list;
backtrack_state := current_state;

while backtrack_state is not start_state do
     prev_state, action, _ := trace[backtrack_state]
	 append (action) into actions list;
	 backtrack_state := prev_state;
end while

actions list := reverse the actions list;
}
-----------------------------------------------------------------------------------
function GREEDY_BEST_FIRST_SEARCH(problem) returns a list of actions towards the pacman goal {
# the pacman goal is to get the food at n-interactions with cost f(n) = g(n) + h(n)
#
input: problem (a tuple of start_state, action, cost, goalState)
# node or state has the same meaning for pacman game
local variables: current_state (a node) and next_state (a neighbor node)

openList := class PriorityQueue();
g := empty list; # step cost
start_state := CREATE-NODE(START-STATE[problem]);
Define function f(current_state) returns manhattanHeuristic(current_state, problem);  # difference from A* is only here
g[start_state] := 0; # cost 0 initially
Push(start_state, 0) into openList;
start openSeen list;
close_list := empty list;
trace := empty list;
trace[start_state] := a tuple with [None, None, 0]

while openList is not empty do
    current_state := get popping open_list;
	remove (current_state) from openSeen list;
	if goal in problem is reached at current_state then break;
	
	successors := getSuccessors from current_state in problem;
	
	for successor in successors do
	    next_state := state from successor;
		next_action = action from successor;
		next_cost := cost from successor;
		successor_cost := g[current_state] + next_cost;
		
	    UPDATE status := False;
		if next_state in openSeen list do
		   if g[next_state] =< successor_cost then pass;
		   else do
		           g[next_state] =< successor_cost;
				   Update openList with item=next_state and priority=f(next_state);
		        end do 
		   else if next_state in close_list do
		        if g[next_state] =< successor_cost then pass;
				else UPDATE status := True;
				end if
		   else: UDPATE status := True
		   end if;
		end if;
		
		if UPDATE status is True then
		   g[next_state] := succcessor_cost;
		   openList update with item=next_state and priority=f(next_state)
		   Append (next) into openSeen;
		   
		   if next_state in close_list then
		      remove(next_state) from close_list;
			  remove(next_state) from openSeen
		   end if;
		end if;
		
		# update and allow tracing to the best state
		if next_state in trace then
		   if cost in trace[next_state] > successor_cost then
		      trace[next_state] state := current_state;
			  trace[next_state] := next_action;
			  trace[next_state] cost := successor_cost;
		   end if;
		end if;
		
		
	end for;
	
	Append(current_state) into close_list;

end while

actions list := empty list;
backtrack_state := current_state;

while backtrack_state is not start_state do
     prev_state, action, _ := trace[backtrack_state]
	 append (action) into actions list;
	 backtrack_state := prev_state;
end while

actions list := reverse the actions list;
}

-----------------------------------------------------------------------------------

function HILL-CLIMBING(problem) returns a list of actions towards the pacman goal {
# the top of hill is the pacman goal
input: problem (a tuple of start_state, action, cost, goalState)
# node or state has the same meaning for pacman game
local variables: current_state (current node) and next_state (a neighbor)
priority_queue := class PriorityQueue();
priority_queue.update(start_state);
current_state := CREATE-NODE(START-STATE[problem]);
prev_cost := 0;
trace[start_state] := tuple of (none state, none action, prev_cost)
veryPreviousSuccessor:=empty;
prevsuccessor := empty; # previous successor;

while not priority_queue.isEmpty do
   current_state := priority_queue.pop();
   
   if problem goal is current_state state then end while;
   
   successors := problem.getSuccessors(current_state); # a pacman sucessor can be 
                             # any next position at North, South, 
			                 # East, West. Making sure  that                 
		                     # previous position is not allowed.
						     # and if there are more than one of successors 
							 # is selected at random, as cost of any 
							 # step in pacman is unique.
   
	t := length of successors # amount of successors;
	selectedSuccessor=[];
	if t is 1, i.e. unique successor then
	   index := 0;
	   selectedSuccessor := successors;
	else
	   i := 0;

	 while True:
	   i := i+1;
	   index := choose at random in between 0 and t-1;
	   if previousSuccessor is [] then
	      selectedSuccessor := successors[index];
		  prevsuccessor := selectedSuccessor;
		  break;
	   if state in successors[index] not equal to state in previousSuccessor then
	      if (not(action='East' in successors[index] and action='West' in previousSuccessor[index]
		       or action='West' in successors[index] and action='East' in previousSuccessor[index]
			   or action='South' in successors[index] and action='North' in previousSuccessor[index]
			   or action='North' in successors[index] and action='South' in previousSuccessor[index]))
			   then 
			       selectedSuccessor := successors[index];
				   previousSuccessor := selectedSuccessor;
				   break; # exit from while True
       if (i>5) then # if more than 5 attempts
	      index := get a number at random in between 0 and t-1; # choose a successor at random
		  selectedSuccessor := successors[index];
		  previousSuccessor := selectedSuccessor;
	
	 for successor in selectedSuccessor do
		next_state = state of successor; # node
		next_action = action of successor; # if west, east, north, sourth
		next_cost = cost of successor; # always 1
	     
		if veryPreviousSuccessor is empty then 
		   veryPreviousSuccessor := successor;
		   prev_cost := cost of trace[current_state];
		   priority_queue update with next_state;
		else if (not(action='East' in successors[index] and action='West' in previousSuccessor[index]
		       or action='West' in successors[index] and action='East' in previousSuccessor[index]
			   or action='South' in successors[index] and action='North' in previousSuccessor[index]
			   or action='North' in successors[index] and action='South' in previousSuccessor[index]))
			   then
			      veryPreviousSuccessor := successor;
				  prev_cost := cost of trace[current_state];
				  priority_queue update with next_state;
		end if
				  
		if next_state is not in the trace then
		   trace[next_state] := tuple of [current_state, next_action, 1]
		end if
	end while
end while

actions list := an empty list;	   
backtrack_state := current_state;

while backtrack_state is not start_start do
     prev_state, action, _ := trace[backtrack_state]
	 append (action) to actions list;
	 backtrack_state := prev_state;
end while

actions list := reverse the actions list;
}

--------------------------------------------------------------------------------------------------------
function MANHATTAN_HEURISTIC(position, problem) returns a absolute value float {
# The aim is to return a list of actions pacman to reach the goal (a food) by
# searching the shallowest nodes or states in the search tree first.
#
input: problem (a tuple of start_state, action, cost, goalState), position
xy1 := position;
xy2 := problem.goalState;
# xy1, xy2 are in coordinated axis (i, j)

return absolute value (xy1(i,) - xy2(i,) + absolute value (xy1(,j)- xy2(,j))

-----------------------------------------------------------------------------------
